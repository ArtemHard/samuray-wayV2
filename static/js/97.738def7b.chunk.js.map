{"version":3,"file":"static/js/97.738def7b.chunk.js","mappings":"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","sources":["api/profileApi.ts","redux/actions/profileAC.ts","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer/ProfileContainer.tsx","hocs/withRouter.tsx","hocs/withAuthRedirectComponent.tsx"],"sourcesContent":["import { instance } from \"./axios\";\r\nexport const profileApi = {\r\n  getProfile(userId?: string) {\r\n    return instance\r\n      .get(`profile/` + generateUserId(userId))\r\n      .then((response) => response.data);\r\n  },\r\n  getStatus(userId: string) {\r\n    return instance\r\n      .get(\"profile/status/\" + generateUserId(userId))\r\n      .then((response) => {\r\n        return response.data;\r\n      });\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance\r\n      .put(\"profile/status/\", {\r\n        status,\r\n      })\r\n      .then((response) => response.data);\r\n  },\r\n};\r\n\r\nconst generateUserId = (userId?: string) => (userId ? userId : \"28053\");\r\n","import { Dispatch } from \"redux\";\r\nimport { profileApi } from \"../../api/profileApi\";\r\n\r\nexport type ProfileReducerActionTypes =\r\n  | ReturnType<typeof addPost>\r\n  | ReturnType<typeof updatePosts>\r\n  | ReturnType<typeof setUserProfile>\r\n  | ReturnType<typeof setStatus>;\r\n\r\nexport const addPost = (newPostText: string) => {\r\n  return {\r\n    type: \"ADD-POST\",\r\n    newPostText,\r\n  } as const;\r\n};\r\nexport const updatePosts = (text: string) => {\r\n  return {\r\n    type: \"UPDATE-NEWPOST\",\r\n    newText: text,\r\n  } as const;\r\n};\r\nexport const setUserProfile = (profile: any) => {\r\n  return {\r\n    type: \"SET-USER-PROFILE\",\r\n    profile,\r\n  } as const;\r\n};\r\n\r\nexport const setStatus = (status: string) => {\r\n  return {\r\n    type: \"SET-USER-STATUS\",\r\n    status,\r\n  } as const;\r\n};\r\n\r\nexport const getProfile = (userId: string) => async (dispatch: Dispatch) => {\r\n  const response = await profileApi.getProfile(userId);\r\n  dispatch(setUserProfile(response));\r\n};\r\n\r\nexport const getStatus = (userId: string) => async (dispatch: Dispatch) => {\r\n  const response = await profileApi.getStatus(userId);\r\n  if (response.data) dispatch(setStatus(response.data));\r\n};\r\nexport const updateStatus =\r\n  (newStatus: string) => async (dispatch: Dispatch) => {\r\n    const response = await profileApi.updateStatus(newStatus);\r\n    if (response.resultCode === 0) dispatch(setStatus(newStatus));\r\n  };\r\n","import React, { Component } from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n  status: string;\r\n  updateStatus: (newStatus: string) => void;\r\n};\r\n\r\nexport class ProfileStatus extends Component<ProfileStatusPropsType> {\r\n  state = {\r\n    editMode: false,\r\n    status: this.props.status,\r\n  };\r\n\r\n  activateEditMode = () => {\r\n    this.setState({\r\n      editMode: true,\r\n    });\r\n  };\r\n  dectivateEditMode = () => {\r\n    this.setState({\r\n      editMode: false,\r\n    });\r\n    this.props.updateStatus(this.state.status);\r\n  };\r\n  onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      status: e.currentTarget.value,\r\n    });\r\n  };\r\n  componentDidUpdate(\r\n    prevProps: Readonly<ProfileStatusPropsType>,\r\n    prevState: Readonly<{}>,\r\n    snapshot?: any\r\n  ): void {\r\n    if (prevProps.status !== this.props.status) {\r\n      this.setState({\r\n        status: this.props.status,\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {!this.state.editMode && (\r\n          <div>\r\n            <span onDoubleClick={this.activateEditMode}>\r\n              {this.props.status || \"status doesnt exist\"}\r\n            </span>\r\n          </div>\r\n        )}\r\n        {this.state.editMode && (\r\n          <div>\r\n            <input\r\n              // ref={this.statusInputRef}\r\n              onChange={this.onStatusChange}\r\n              autoFocus={true}\r\n              onBlur={this.dectivateEditMode}\r\n              value={this.state.status}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import styled from \"styled-components\";\r\nimport { Loader } from \"../../common/Loader/Loader\";\r\nimport { ProfileStatus } from \"./ProfileStatus\";\r\nimport { ProfilePropsType } from \"../Profile\";\r\n\r\nexport const ProfileInfo = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n}: ProfilePropsType) => {\r\n  if (!profile) {\r\n    return <Loader />;\r\n  } else\r\n    return (\r\n      <Wrapper>\r\n        <img\r\n          src='https://e7.pngegg.com/pngimages/340/946/png-clipart-avatar-user-computer-icons-software-developer-avatar-child-face-thumbnail.png'\r\n          alt='ava'\r\n        />\r\n\r\n        <div>\r\n          <AvatarImg src={profile.photos.large} />\r\n          <ProfileStatus status={status} updateStatus={updateStatus} />\r\n        </div>\r\n        <div>\r\n          <div>\r\n            <b>{profile.fullName}</b>\r\n          </div>\r\n          <div>{profile.aboutMe}</div>\r\n          <div>{profile.contacts.vk}</div>\r\n        </div>\r\n      </Wrapper>\r\n    );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  //margin-top: 50px;\r\n  & > img {\r\n    width: 50px;\r\n  }\r\n`;\r\ntype AvatarImgPropsType = {\r\n  src: string;\r\n};\r\nconst AvatarImg = styled.img.attrs<AvatarImgPropsType>((props) => ({\r\n  src: props.src,\r\n}))`\r\n  width: 300px;\r\n  object-fit: cover;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { ProfileInfo } from \"../../ProfileInfo/ProfileInfo\";\r\n\r\ntype PropsType = {\r\n  message: string;\r\n  likesCount: number;\r\n};\r\n\r\nexport const Post = (props: PropsType) => {\r\n  return (\r\n    <PostWrapper>\r\n      {/*<img*/}\r\n      {/*    src=\"https://e7.pngegg.com/pngimages/340/946/png-clipart-avatar-user-computer-icons-software-developer-avatar-child-face-thumbnail.png\"*/}\r\n      {/*    alt=\"ava\"/>*/}\r\n\r\n      <span>{props.message}</span>\r\n      <div>Like: {props.likesCount}</div>\r\n    </PostWrapper>\r\n  );\r\n};\r\n\r\nconst PostWrapper = styled.div`\r\n  margin-top: 50px;\r\n\r\n  & > img {\r\n    width: 50px;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\nimport { PostType } from \"../../../redux/types/reducersTypes/profileReducerType\";\r\nimport { Post } from \"./Post/Post\";\r\nimport { CommonForm } from \"../../../common/CommonForm\";\r\nimport { memo } from \"react\";\r\n\r\ntype PostsType = {\r\n  posts: PostType[];\r\n  newPostText: string;\r\n  addPost: (newPostText: string) => void;\r\n};\r\n\r\nexport const MyPosts = memo((props: PostsType) => {\r\n  const posts = props.posts.map((post) => {\r\n    return (\r\n      <Post key={post.id} message={post.message} likesCount={post.likesCount} />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <MyPostsWrapper>\r\n      <div>MyPosts</div>\r\n      <CommonForm\r\n        onSubmitHandler={props.addPost}\r\n        textArea={true}\r\n        maxLength={20}\r\n      />\r\n      {posts}\r\n    </MyPostsWrapper>\r\n  );\r\n});\r\n\r\nconst MyPostsWrapper = styled.div`\r\n  margin-left: 20px;\r\n`;\r\n","import { connect } from \"react-redux\";\r\nimport { reducersType, store } from \"../../../redux/redux-store\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nimport { addPost, updatePosts } from \"../../../redux/actions/profileAC\";\r\nimport { PostType } from \"../../../redux/types/reducersTypes/profileReducerType\";\r\nimport { MyPosts } from \"./MyPosts\";\r\n\r\ntype MapStateToProps = {\r\n  posts: PostType[];\r\n  newPostText: string;\r\n};\r\nconst mapStateToProps = (state: reducersType): MapStateToProps => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\n\r\n// type MapDispatchToProps = {\r\n//   addPost: () => void;\r\n//   onPostChange: (newText: string) => void;\r\n// };\r\n// const mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n//   return {\r\n//     addPost: () => {\r\n//       dispatch(addPostAC());\r\n//     },\r\n//     onPostChange: (newText: string) => {\r\n//       dispatch(updatePostsAC(newText));\r\n//     },\r\n//   };\r\n// };\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {\r\n  addPost,\r\n})(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport { profilePageType } from \"../../redux/profile-reducer\";\r\nimport { ProfileType } from \"../../redux/types/reducersTypes/profileReducerType\";\r\nimport { AnyAction, Dispatch } from \"redux\";\r\n\r\nexport type ProfilePropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  updateStatus: (newStatus: string) => void;\r\n};\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n  return (\r\n    <div className={\"MainContent\"}>\r\n      <ul>\r\n        <li>HTML</li>\r\n        <li>CSS</li>\r\n        <li>TS</li>\r\n        <li>REACT</li>\r\n      </ul>\r\n      <ProfileInfo {...props} />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n","import { Component, ComponentType } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { WithAuthRedirectComponent } from \"../../../hocs/withAuthRedirectComponent\";\r\nimport {\r\n  getProfile,\r\n  getStatus,\r\n  updateStatus,\r\n} from \"../../../redux/actions/profileAC\";\r\nimport { reducersType } from \"../../../redux/redux-store\";\r\nimport { ProfileType } from \"../../../redux/types/reducersTypes/profileReducerType\";\r\nimport { Profile } from \"../Profile\";\r\nimport { withRouter } from \"../../../hocs/withRouter\";\r\n\r\ntype ProfileContainerPropsType = PropsFromRedux & WithRouterProps;\r\n\r\nexport class ProfileContainer extends Component<ProfileContainerPropsType> {\r\n  componentDidMount(): void {\r\n    let { userId } = this.props.params;\r\n    const authorizedUserId = this.props.authorizedUserId;\r\n\r\n    if (!userId && authorizedUserId) {\r\n      userId = authorizedUserId.toString();\r\n    }\r\n\r\n    this.props.getProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n\r\n  render() {\r\n    return <Profile {...this.props} />;\r\n  }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  authorizedUserId: number | null;\r\n  isAuth: boolean;\r\n};\r\nconst mapStateToProps = (state: reducersType): mapStateToPropsType => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport interface WithRouterProps {\r\n  location: ReturnType<typeof useLocation>;\r\n  params: Record<string, string>;\r\n  navigate: ReturnType<typeof useNavigate>;\r\n}\r\n\r\nexport const withRouter2 = <Props extends WithRouterProps>(\r\n  Component: React.ComponentType<Props>\r\n) => {\r\n  return (props: Omit<Props, keyof WithRouterProps>) => {\r\n    const location = useLocation();\r\n    const params = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    return (\r\n      <Component\r\n        {...(props as Props)}\r\n        location={location}\r\n        params={params}\r\n        navigate={navigate}\r\n      />\r\n    );\r\n  };\r\n};\r\nexport type WithRouterType = ReturnType<typeof withRouter2>;\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\nconst connector = connect(mapStateToProps, {\r\n  getProfile,\r\n  getStatus,\r\n  updateStatus,\r\n});\r\nexport default compose<ComponentType>(\r\n  connector,\r\n  withRouter,\r\n  WithAuthRedirectComponent\r\n)(ProfileContainer);\r\n","import { useLocation, useNavigate, useParams } from \"react-router-dom\";\r\n\r\nexport interface WithRouterProps {\r\n  location: ReturnType<typeof useLocation>;\r\n  params: Record<string, string>;\r\n  navigate: ReturnType<typeof useNavigate>;\r\n  // redirect: ReturnType<typeof redirect>;\r\n}\r\n\r\nexport const withRouter = <Props extends WithRouterProps>(\r\n  Component: React.ComponentType<Props>\r\n) => {\r\n  return (props: Omit<Props, keyof WithRouterProps>) => {\r\n    const location = useLocation();\r\n    const params = useParams();\r\n    const navigate = useNavigate();\r\n    // const toRedirect = (to: string) => redirect(to);\r\n\r\n    return (\r\n      <Component\r\n        {...(props as Props)}\r\n        location={location}\r\n        params={params}\r\n        navigate={navigate}\r\n        // redirect={toRedirect}\r\n      />\r\n    );\r\n  };\r\n};\r\n","import { Navigate } from \"react-router-dom\";\r\nimport { reducersType } from \"../redux/redux-store\";\r\nimport { connect } from \"react-redux\";\r\ntype mapStateToPropsType = {\r\n  isAuth: boolean;\r\n};\r\n\r\nconst mapStateToProps = (state: reducersType): mapStateToPropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\nexport const WithAuthRedirectComponent = (Component: any) => {\r\n  const RedirectComponent = (props: any) => {\r\n    if (!props.isAuth) {\r\n      return <Navigate to={\"/login\"} />;\r\n    }\r\n    return <Component {...props} />;\r\n  };\r\n  let connectedAuthRedirectComponent =\r\n    connect(mapStateToProps)(RedirectComponent);\r\n  return connectedAuthRedirectComponent;\r\n};\r\n"],"names":["profileApi","userId","instance","generateUserId","then","response","data","status","setStatus","type","ProfileStatus","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","editMode","props","activateEditMode","setState","dectivateEditMode","updateStatus","onStatusChange","e","currentTarget","value","_createClass","key","prevProps","prevState","snapshot","this","_jsxs","children","_jsx","onDoubleClick","onChange","autoFocus","onBlur","Component","ProfileInfo","_ref","profile","Wrapper","src","alt","AvatarImg","photos","large","fullName","aboutMe","contacts","vk","Loader","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","Post","PostWrapper","message","likesCount","MyPosts","memo","posts","map","post","id","MyPostsWrapper","CommonForm","onSubmitHandler","addPost","textArea","maxLength","connect","profilePage","newPostText","Profile","className","_objectSpread","MyPostsContainer","ProfileContainer","params","authorizedUserId","toString","getProfile","getStatus","withRouter2","location","useLocation","useParams","navigate","useNavigate","connector","auth","isAuth","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dispatch","wrap","_context","prev","next","sent","stop","_x","_ref2","_callee2","_context2","_x2","newStatus","_ref3","_callee3","_context3","resultCode","_x3","compose","WithAuthRedirectComponent","mapStateToProps","Navigate","to"],"sourceRoot":""}