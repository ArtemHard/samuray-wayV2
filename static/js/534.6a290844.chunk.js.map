{"version":3,"file":"static/js/534.6a290844.chunk.js","mappings":"wNAQaA,EAAa,SAACC,GACvB,IAAIC,EAAK,YAADC,OAAaF,EAAMG,IAC3B,OACIC,EAAAA,EAAAA,KAAA,OAAAC,UAAKD,EAAAA,EAAAA,KAACE,EAAAA,GAAO,CAACC,GAAIN,EAAKI,SAAEL,EAAMQ,QAEvC,ECPaC,EAAU,SAACT,GACpB,OACII,EAAAA,EAAAA,KAAA,OAAAC,SAAML,EAAMU,SAEpB,E,UC2DMC,EAAUC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4CAKpBC,EAAOH,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,yDAKjBG,EAAQL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,wE,wCChClBK,GAAYC,EAAAA,EAAAA,KAjCM,SAACC,GACvB,MAAO,CACLA,MAAOA,EAAMC,YACbC,OAAQF,EAAMG,KAAKD,OAEvB,IAK2B,SAACE,GAC1B,MAAO,CACLC,2BAA4B,SAACC,GAC3BF,GAASG,EAAAA,EAAAA,GAAcD,GACzB,EAEJ,IAmBA,GAAeE,EAAAA,EAAAA,IACbV,EACAW,EAAAA,EAFF,EDjCuB,SAAC9B,GAEtB,IAAM+B,EAAU/B,EAAMqB,MAAMU,QAAQC,KAAI,SAACC,GACvC,OAAO7B,EAAAA,EAAAA,KAACL,EAAU,CAACS,KAAMyB,EAAEzB,KAAiBL,GAAI8B,EAAE9B,IAAZ8B,EAAE9B,GAC1C,IACM+B,EAAWlC,EAAMqB,MAAMa,SAASF,KAAI,SAACG,GACzC,OAAO/B,EAAAA,EAAAA,KAACK,EAAO,CAAYC,QAASyB,EAAEzB,SAAjByB,EAAEhC,GACzB,IAMA,OACEiC,EAAAA,EAAAA,MAACzB,EAAO,CAAAN,SAAA,EACND,EAAAA,EAAAA,KAACW,EAAI,CAAAV,SAAE0B,KACPK,EAAAA,EAAAA,MAACnB,EAAK,CAAAZ,SAAA,CACH6B,GACD9B,EAAAA,EAAAA,KAACiC,EAAAA,EAAU,CACTC,gBAV2B,SAACX,GAClC3B,EAAM0B,2BAA2BC,EACnC,EASQY,UAAU,EACVC,UAAW,UAKrB,G,kGEnCMC,EAAkB,SAACpB,GACvB,MAAO,CACLE,OAAQF,EAAMG,KAAKD,OAEvB,EACaO,EAA4B,SAACY,GASxC,OADEtB,EAAAA,EAAAA,IAAQqB,EAARrB,EAPwB,SAACpB,GACzB,OAAKA,EAAMuB,QAGJnB,EAAAA,EAAAA,KAACsC,GAASC,EAAAA,EAAAA,GAAA,GAAK3C,KAFbI,EAAAA,EAAAA,KAACwC,EAAAA,GAAQ,CAACrC,GAAI,UAGzB,GAIF,C","sources":["components/Dialogs/DialogItem.tsx","components/Dialogs/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hocs/withAuthRedirectComponent.tsx"],"sourcesContent":["import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType={\r\n    name:string\r\n    id:number\r\n}\r\n\r\nexport const DialogItem = (props:PropsType) => {\r\n    let path=`/dialogs/${props.id}`\r\n    return (\r\n        <div><NavLink to={path}>{props.name}</NavLink></div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\n\r\ntype PropsType={\r\n    message:string\r\n}\r\n\r\nexport const Message = (props:PropsType) => {\r\n    return (\r\n        <div>{props.message}</div>\r\n    );\r\n};\r\n","import styled from \"styled-components\";\r\nimport { DialogItem } from \"./DialogItem\";\r\nimport { Message } from \"./Message\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { ForDialogsProps } from \"./DialogsContainer\";\r\nimport { WithRouterProps } from \"../../hocs/withRouter\";\r\nimport { CommonForm } from \"../../common/CommonForm\";\r\n\r\n// type StateType = {\r\n//   state: messagesPageType;\r\n//   isAuth: boolean;\r\n//   onSendmessageClickkhandler: () => void;\r\n//   onNewMessageChange: (newMessage: string) => void;\r\n// };\r\n\r\ntype DialogsPropsType = ForDialogsProps & WithRouterProps;\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n  // const newMessageBody = props.state.newMessageText;\r\n  const dialogs = props.state.dialogs.map((d) => {\r\n    return <DialogItem name={d.name} key={d.id} id={d.id} />;\r\n  });\r\n  const messages = props.state.messages.map((m) => {\r\n    return <Message key={m.id} message={m.message} />;\r\n  });\r\n\r\n  const onSendmessageClickkhandler = (newMessageBody: string) => {\r\n    props.onSendmessageClickkhandler(newMessageBody);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Left>{dialogs}</Left>\r\n      <Right>\r\n        {messages}\r\n        <CommonForm\r\n          onSubmitHandler={onSendmessageClickkhandler}\r\n          textArea={false}\r\n          maxLength={20}\r\n        />\r\n      </Right>\r\n    </Wrapper>\r\n  );\r\n};\r\n// type AddMessageFormPropsType = {\r\n//   onSendmessageClickkhandler: (newMessageBody: string) => void;\r\n// };\r\n\r\n// type FormDataType = {\r\n//   newMessage: string;\r\n// };\r\n// const AddMessageForm = (props: AddMessageFormPropsType) => {\r\n//   const { register, handleSubmit, reset } = useForm<FormDataType>();\r\n\r\n//   const onSubmit = handleSubmit((data) => {\r\n//     props.onSendmessageClickkhandler(data.newMessage);\r\n//     reset();\r\n//   });\r\n//   return (\r\n//     <form onSubmit={onSubmit}>\r\n//       <div>\r\n//         <textarea {...register(\"newMessage\", { required: true })} />\r\n//       </div>\r\n//       <div>\r\n//         <button>Add</button>\r\n//       </div>\r\n//     </form>\r\n//   );\r\n// };\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n`;\r\n\r\nconst Left = styled.div`\r\n  background-color: steelblue;\r\n  width: 50%;\r\n`;\r\n\r\nconst Right = styled.div`\r\n  background-color: #334b9b;\r\n  width: 50%;\r\n  color: white;\r\n`;\r\n","import { Dialogs } from \"./Dialogs\";\r\nimport { messagesPageType, sendMessageAC } from \"../../redux/dialogs-reducer\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { compose, Dispatch } from \"redux\";\r\nimport { reducersType } from \"../../redux/redux-store\";\r\n\r\nimport { WithAuthRedirectComponent } from \"../../hocs/withAuthRedirectComponent\";\r\n\r\nimport { ComponentType } from \"react\";\r\n\r\ntype MapStateToPropsType = {\r\n  state: messagesPageType;\r\n  isAuth: boolean;\r\n};\r\nconst mapStateToProps = (state: reducersType): MapStateToPropsType => {\r\n  return {\r\n    state: state.dialogsPage,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\ntype DispatchToPropsType = {\r\n  onSendmessageClickkhandler: (newMessageBody: string) => void;\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchToPropsType => {\r\n  return {\r\n    onSendmessageClickkhandler: (newMessageBody: string) => {\r\n      dispatch(sendMessageAC(newMessageBody));\r\n    },\r\n  };\r\n};\r\n/*\r\n// const AuthRedirectComponent = WithAuthRedirectComponent(Dialogs);\r\n\r\n// export type PropsForDialogs = ConnectedProps<typeof connector>;\r\n// const connector = connect(mapStateToProps, mapDispatchToProps);\r\n// const DialogsContainer = connector(withRouter2(Dialogs));\r\n\r\n// export default DialogsContainer;\r\n*/\r\n// second solution\r\n\r\n// export type AuthAndRouterTypes = AuthPropsType & WithRouterType;\r\n\r\n// const withRouterDialogsComponent = withRouter2(authRedirectDialogsComponent)\r\n\r\nexport type ForDialogsProps = ConnectedProps<typeof connector>;\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\nexport default compose<ComponentType>(\r\n  connector,\r\n  WithAuthRedirectComponent\r\n)(Dialogs);\r\n\r\n// third solution\r\n/*\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(WithAuthRedirectComponent(withRouter2(Dialogs)));\r\n*/\r\n","import { Navigate } from \"react-router-dom\";\r\nimport { reducersType } from \"../redux/redux-store\";\r\nimport { connect } from \"react-redux\";\r\ntype mapStateToPropsType = {\r\n  isAuth: boolean;\r\n};\r\n\r\nconst mapStateToProps = (state: reducersType): mapStateToPropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\nexport const WithAuthRedirectComponent = (Component: any) => {\r\n  const RedirectComponent = (props: any) => {\r\n    if (!props.isAuth) {\r\n      return <Navigate to={\"/login\"} />;\r\n    }\r\n    return <Component {...props} />;\r\n  };\r\n  let connectedAuthRedirectComponent =\r\n    connect(mapStateToProps)(RedirectComponent);\r\n  return connectedAuthRedirectComponent;\r\n};\r\n"],"names":["DialogItem","props","path","concat","id","_jsx","children","NavLink","to","name","Message","message","Wrapper","styled","_templateObject","_taggedTemplateLiteral","Left","_templateObject2","Right","_templateObject3","connector","connect","state","dialogsPage","isAuth","auth","dispatch","onSendmessageClickkhandler","newMessageBody","sendMessageAC","compose","WithAuthRedirectComponent","dialogs","map","d","messages","m","_jsxs","CommonForm","onSubmitHandler","textArea","maxLength","mapStateToProps","Component","_objectSpread","Navigate"],"sourceRoot":""}